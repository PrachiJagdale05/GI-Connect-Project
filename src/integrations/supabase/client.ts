
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jumcsxhftlhxzmeqpuvb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp1bWNzeGhmdGxoeHptZXFwdXZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3MDkxOTgsImV4cCI6MjA1ODI4NTE5OH0.Fad-NIZY4xGcEWJX8GMj3tk6zC35LkOX7zbWf0Rxis0";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    }
  }
);

// Check if a bucket exists and create it if it doesn't
export const ensureBucketExists = async (bucketName: string): Promise<{ exists: boolean; error: Error | null }> => {
  try {
    // Check if bucket exists
    const { data, error } = await supabase.storage.getBucket(bucketName);
    
    if (error) {
      console.error(`Error checking if bucket ${bucketName} exists:`, error);
      if (error.message.includes('Bucket not found')) {
        console.log(`Bucket ${bucketName} not found, attempting to create it...`);
        
        // Try to create the bucket
        const { data: createData, error: createError } = await supabase.storage.createBucket(bucketName, {
          public: true
        });
        
        if (createError) {
          console.error(`Failed to create bucket ${bucketName}:`, createError);
          return { exists: false, error: createError };
        }
        
        console.log(`Successfully created bucket ${bucketName}`);
        return { exists: true, error: null };
      }
      return { exists: false, error };
    }
    
    console.log(`Bucket ${bucketName} exists`);
    return { exists: true, error: null };
  } catch (error) {
    console.error(`Unexpected error with bucket ${bucketName}:`, error);
    return { 
      exists: false, 
      error: error instanceof Error ? error : new Error('Unknown bucket error')
    };
  }
};

// Helper function to get storage URL for a path
export const getStorageUrl = (path: string, bucket: string = 'products') => {
  if (!path) return null;
  const storageUrl = `${SUPABASE_URL}/storage/v1/object/public/${bucket}/${path}`;
  console.log(`Generated URL for ${path} in bucket ${bucket}: ${storageUrl}`);
  return storageUrl;
};

// Helper function to upload a file to storage
export const uploadToStorage = async (
  file: File, 
  bucket: string = 'product-images', 
  path: string = ''
): Promise<{ path: string | null; publicUrl: string | null; error: Error | null }> => {
  try {
    // Ensure the bucket exists before uploading
    const { exists, error: bucketError } = await ensureBucketExists(bucket);
    
    if (bucketError || !exists) {
      console.error(`Cannot upload to bucket ${bucket} - bucket doesn't exist or is inaccessible`);
      return { 
        path: null, 
        publicUrl: null,
        error: bucketError || new Error(`Bucket ${bucket} doesn't exist or is inaccessible`) 
      };
    }
    
    // Generate a unique name for the file
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const safeName = file.name.replace(/[^a-zA-Z0-9.]/g, '_');
    const fileName = path ? 
      `${path}/${timestamp}_${randomString}_${safeName}` : 
      `${timestamp}_${randomString}_${safeName}`;
    
    console.log(`Uploading to ${bucket}/${fileName}`);
    
    // Upload the file
    const { data, error } = await supabase
      .storage
      .from(bucket)
      .upload(fileName, file, {
        cacheControl: '3600',
        upsert: true
      });
    
    if (error) {
      console.error('Storage upload error:', error);
      return { path: null, publicUrl: null, error };
    }
    
    // Get the public URL for the uploaded file
    const { data: { publicUrl } } = supabase.storage.from(bucket).getPublicUrl(data.path);
    
    console.log('Storage upload successful:', data);
    console.log('Generated public URL:', publicUrl);
    
    return { path: data.path, publicUrl, error: null };
  } catch (error) {
    console.error('Unexpected error during upload:', error);
    return { 
      path: null, 
      publicUrl: null,
      error: error instanceof Error ? error : new Error('Unknown upload error') 
    };
  }
};

// Add a specific function for uploading GI certificates
export const uploadGICertificate = async (
  file: File,
  productId: string
): Promise<{ path: string | null; publicUrl: string | null; error: Error | null }> => {
  try {
    // Use a dedicated bucket for GI certificates
    const bucket = 'gi-certificates';
    const path = `products/${productId}`;
    
    // Upload the certificate
    const result = await uploadToStorage(file, bucket, path);
    
    if (result.error) {
      return result;
    }
    
    console.log(`Successfully uploaded GI certificate for product ${productId}: ${result.publicUrl}`);
    return result;
  } catch (error) {
    console.error('Error uploading GI certificate:', error);
    return { 
      path: null, 
      publicUrl: null,
      error: error instanceof Error ? error : new Error('Unknown error uploading GI certificate') 
    };
  }
};
